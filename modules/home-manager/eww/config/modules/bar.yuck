(defwidget bar [screen]
  (centerbox :orientation "v"
    (box :valign "start"
      (top :screen screen))
    (box :valign "center"
      (middle :screen screen))
    (box :valign "end"
      (bottom :screen screen))))

(defwidget niri-workspace-widget [monitor]
  (box :class "workspaces"
    :orientation "v"
    ; TODO: make this monitor specific, with a jq filter
    (for i in {jq(niri-workspaces, ".=sort_by(.idx)")}
      (button
        :onclick "niri msg action focus-workspace ${i.idx}"
        "${i.is_focused ? "  " : "  "}"))))

(defwidget top [screen] (box (niri-workspace-widget :monitor 0)))

(defwidget middle [screen] (time))
(defwidget time []
  (box
    :orientation "v"
    :class "time"
  hour min)
)

(defwidget network_icon []
  (box
  :orientation "v"
  :visible {network.name != ""}
  {network.icon})
)

(defwidget battery []
  (box :orientation "v"
    ; use for loop to support different battery names
    {
      EWW_BATTERY.BAT1.status == "Full" ? "󱟢" :
      EWW_BATTERY.BAT1.status == "Charging" ? "󰚥" :
      EWW_BATTERY.BAT1.capacity <= 10 ? "󰂃" :
      EWW_BATTERY.BAT1.capacity <= 20 ? "󰂃" :
      EWW_BATTERY.BAT1.capacity <= 30 ? "󰁻" :
      EWW_BATTERY.BAT1.capacity <= 40 ? "󰁼" :
      EWW_BATTERY.BAT1.capacity <= 50 ? "󰁽" :
      EWW_BATTERY.BAT1.capacity <= 60 ? "󰁾" :
      EWW_BATTERY.BAT1.capacity <= 70 ? "󰁿" :
      EWW_BATTERY.BAT1.capacity <= 80 ? "󰂀" :
      EWW_BATTERY.BAT1.capacity <= 90 ? "󰂁" :
      EWW_BATTERY.BAT1.capacity <= 100 ? "󰂂" :
      ""
    }
    {EWW_BATTERY.BAT1.capacity}
  ))

(defwidget player []
  (box
    :orientation "v"
    :tooltip "${title} - ${artist}"
    :visible {status != ""}
    (button
      :onclick "playerctl play-pause"
      {
        status == "Playing" ? "":
        status == "Paused" ? "":
        status == "Stopped" ? "":
        "󰝛"
      })))

(defwidget bottom [screen]
  (box
    :orientation "v"
    :space-evenly false
    (systray
      :orientation "v"
      :icon-size 16
    :prepend-new true)
    (player)
    (battery)
    (network_icon)
  ))

(defwindow sidebar
  :monitor "eDP-1"
  :stacking 'fg'
  :geometry (geometry :x 0 :y 0 :height "100%" :anchor "center left")
  ; :exclusive true
  (bar :screen 1)
)
